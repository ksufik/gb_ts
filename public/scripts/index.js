import { getDate, renderSearchFormBlock, search } from './search-form.js';
import { renderSearchStubBlock } from './search-results.js';
import { avatar, favorites, name, renderUserBlock } from './user.js';
import { renderToast } from './lib.js';
window.addEventListener('DOMContentLoaded', () => {
    let formData = {
        city: "Санкт-Петербург",
        checkIn: getDate('checkIn'),
        checkOut: getDate('checkOut'),
        price: 0
    };
    renderUserBlock(name, avatar, favorites);
    renderSearchFormBlock(formData);
    renderSearchStubBlock();
    renderToast({ text: 'Это пример уведомления. Используйте его при необходимости', type: 'success' }, { name: 'Понял', handler: () => { console.log('Уведомление закрыто'); } });
    /** Брать элементы из DOM тогда когда они появились в нём, т.е. после всех ф-ций рендер*/
    const state = {};
    const form = document.getElementById('form');
    const btnSearch = document.getElementById('btn-search');
    // form.addEventListener('load', () => {
    //   // const valueControl = (HTMLFormElement)
    //   // const nameControl = (e.target as HTMLFormElement).name
    //   // state[nameControl] = valueControl
    //   // console.log('form load state', valueControl);
    //   console.log('page is fully loaded');
    // })
    form.addEventListener('change', function (e) {
        const valueControl = e.target.value;
        const nameControl = e.target.name;
        formData[nameControl] = valueControl;
    });
    btnSearch.addEventListener('click', function (e) {
        e.preventDefault();
        search(formData);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBbUIscUJBQXFCLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDMUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXRDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFFL0MsSUFBSSxRQUFRLEdBQW9CO1FBQzlCLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDM0IsUUFBUSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDN0IsS0FBSyxFQUFFLENBQUM7S0FDVCxDQUFBO0lBRUQsZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDeEMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMscUJBQXFCLEVBQUUsQ0FBQTtJQUN2QixXQUFXLENBQ1QsRUFBRSxJQUFJLEVBQUUsMkRBQTJELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUN0RixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUN6RSxDQUFBO0lBRUQseUZBQXlGO0lBQ3pGLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQTtJQUNoQixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzVDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUE7SUFFdkQsd0NBQXdDO0lBQ3hDLDhDQUE4QztJQUM5Qyw4REFBOEQ7SUFFOUQseUNBQXlDO0lBRXpDLHFEQUFxRDtJQUNyRCx5Q0FBeUM7SUFDekMsS0FBSztJQUtMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFRO1FBQ2hELE1BQU0sWUFBWSxHQUFJLENBQUMsQ0FBQyxNQUEwQixDQUFDLEtBQUssQ0FBQTtRQUN4RCxNQUFNLFdBQVcsR0FBSSxDQUFDLENBQUMsTUFBMEIsQ0FBQyxJQUFJLENBQUE7UUFFdEQsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFlBQVksQ0FBQTtJQUN0QyxDQUFDLENBQUMsQ0FBQTtJQUVGLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFhO1FBQ3pELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUVsQixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUE7QUFFSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldERhdGUsIElTZWFyY2hGb3JtRGF0YSwgcmVuZGVyU2VhcmNoRm9ybUJsb2NrLCBzZWFyY2ggfSBmcm9tICcuL3NlYXJjaC1mb3JtLmpzJ1xuaW1wb3J0IHsgcmVuZGVyU2VhcmNoU3R1YkJsb2NrIH0gZnJvbSAnLi9zZWFyY2gtcmVzdWx0cy5qcydcbmltcG9ydCB7IGF2YXRhciwgZmF2b3JpdGVzLCBuYW1lLCByZW5kZXJVc2VyQmxvY2sgfSBmcm9tICcuL3VzZXIuanMnXG5pbXBvcnQgeyByZW5kZXJUb2FzdCB9IGZyb20gJy4vbGliLmpzJ1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcblxuICBsZXQgZm9ybURhdGE6IElTZWFyY2hGb3JtRGF0YSA9IHtcbiAgICBjaXR5OiBcItCh0LDQvdC60YIt0J/QtdGC0LXRgNCx0YPRgNCzXCIsXG4gICAgY2hlY2tJbjogZ2V0RGF0ZSgnY2hlY2tJbicpLFxuICAgIGNoZWNrT3V0OiBnZXREYXRlKCdjaGVja091dCcpLFxuICAgIHByaWNlOiAwXG4gIH1cblxuICByZW5kZXJVc2VyQmxvY2sobmFtZSwgYXZhdGFyLCBmYXZvcml0ZXMpXG4gIHJlbmRlclNlYXJjaEZvcm1CbG9jayhmb3JtRGF0YSk7XG4gIHJlbmRlclNlYXJjaFN0dWJCbG9jaygpXG4gIHJlbmRlclRvYXN0KFxuICAgIHsgdGV4dDogJ9Ct0YLQviDQv9GA0LjQvNC10YAg0YPQstC10LTQvtC80LvQtdC90LjRjy4g0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQtdCz0L4g0L/RgNC4INC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtC4JywgdHlwZTogJ3N1Y2Nlc3MnIH0sXG4gICAgeyBuYW1lOiAn0J/QvtC90Y/QuycsIGhhbmRsZXI6ICgpID0+IHsgY29uc29sZS5sb2coJ9Cj0LLQtdC00L7QvNC70LXQvdC40LUg0LfQsNC60YDRi9GC0L4nKSB9IH1cbiAgKVxuXG4gIC8qKiDQkdGA0LDRgtGMINGN0LvQtdC80LXQvdGC0Ysg0LjQtyBET00g0YLQvtCz0LTQsCDQutC+0LPQtNCwINC+0L3QuCDQv9C+0Y/QstC40LvQuNGB0Ywg0LIg0L3RkdC8LCDRgi7QtS4g0L/QvtGB0LvQtSDQstGB0LXRhSDRhC3RhtC40Lkg0YDQtdC90LTQtdGAKi9cbiAgY29uc3Qgc3RhdGUgPSB7fVxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm0nKVxuICBjb25zdCBidG5TZWFyY2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuLXNlYXJjaCcpXG5cbiAgLy8gZm9ybS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAvLyAgIC8vIGNvbnN0IHZhbHVlQ29udHJvbCA9IChIVE1MRm9ybUVsZW1lbnQpXG4gIC8vICAgLy8gY29uc3QgbmFtZUNvbnRyb2wgPSAoZS50YXJnZXQgYXMgSFRNTEZvcm1FbGVtZW50KS5uYW1lXG5cbiAgLy8gICAvLyBzdGF0ZVtuYW1lQ29udHJvbF0gPSB2YWx1ZUNvbnRyb2xcblxuICAvLyAgIC8vIGNvbnNvbGUubG9nKCdmb3JtIGxvYWQgc3RhdGUnLCB2YWx1ZUNvbnRyb2wpO1xuICAvLyAgIGNvbnNvbGUubG9nKCdwYWdlIGlzIGZ1bGx5IGxvYWRlZCcpO1xuICAvLyB9KVxuXG5cblxuXG4gIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGU6IEV2ZW50KSB7XG4gICAgY29uc3QgdmFsdWVDb250cm9sID0gKGUudGFyZ2V0IGFzIEhUTUxGb3JtRWxlbWVudCkudmFsdWVcbiAgICBjb25zdCBuYW1lQ29udHJvbCA9IChlLnRhcmdldCBhcyBIVE1MRm9ybUVsZW1lbnQpLm5hbWVcblxuICAgIGZvcm1EYXRhW25hbWVDb250cm9sXSA9IHZhbHVlQ29udHJvbFxuICB9KVxuXG4gIGJ0blNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlOiBNb3VzZUV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBzZWFyY2goZm9ybURhdGEpO1xuICB9KVxuXG59KVxuXG5cbiJdfQ==